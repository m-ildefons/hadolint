name: Release
on:
  # Trigger the workflow on the new 'v*' tag created
  push:
    tags:
      - "v*"

  # also on manual trigger
  workflow_dispatch:
    inputs:
      release_version:
        description: 'The version number for the release'
        required: true

jobs:
  build-static:
    name: Create Release for Linux (static)
    runs-on: ${{ matrix.os }}
    container:
      image: alpine:3.21
      volumes:
        - /:/host
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-amd64
            ghcup: https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup
            ghc: 9.2.8
          - os: ubuntu-24.04-arm
            target: linux-arm64
            ghcup: https://downloads.haskell.org/~ghcup/aarch64-linux-ghcup
            ghc: 9.8.2
    steps:
      - name: Install system dependencies
        run: |
          apk add --no-cache curl gcc g++ gmp-dev ncurses-dev libffi-dev make xz gzip tar perl git bash sudo binutils-gold
          apk add --no-cache zlib zlib-dev zlib-static gmp gmp-dev ncurses-static libc-dev libffi-dev musl-dev

      - name: Install ghcup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf ${{ matrix.ghcup }}  > /usr/bin/ghcup
          chmod +x /usr/bin/ghcup
          echo "$HOME/.ghcup/bin" $GITHUB_PATH
        shell: bash

      - name: Install GHC and cabal
        run: |
          ghcup install ghc   --force -i /usr/local ${{ matrix.ghc }}
          ghcup install cabal --force -i /usr/local/bin
        shell: bash

      - uses: actions/checkout@v4

      - name: Update cabal cache
        run: cabal update
        shell: bash

      - name: create ~/.local/bin
        run: mkdir -p "$HOME/.local/bin"
        shell: bash

      - run: echo "HOME=$HOME" >> $GITHUB_ENV
        shell: bash

      - name: Freeze
        run: cabal freeze

      - name: Cache store
        uses: actions/cache@v4.2.0
        with:
          path: ~/.cabal/store
          key: ${{ matrix.os }}-${{ hashFiles('cabal.project.freeze') }}

      - name: Install cabal dependencies
        run: cabal build --only-dependencies --disable-shared --ghc-options='-split-sections -optl-static -fPIC'
        shell: bash

      - name: Install
        run: cabal install --installdir="$HOME/.local/bin" --install-method=copy --overwrite-policy=always --enable-executable-static --disable-executable-dynamic --disable-shared --ghc-options='-split-sections -optl-static -optl-pthread -fPIC'
        shell: bash

      - name: Strip
        run: strip ~/.local/bin/hadolint
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-${{ matrix.target }}
          path: ~/.local/bin/hadolint
          retention-days: 3

  build-dynamic:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            target: macos-x86_64
          - os: macos-14
            target: macos-arm64
          - os: windows-latest
            target: windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - id: setup-haskell
        name: Set up Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.8'

      - name: Freeze
        run: cabal freeze

      - name: Cache store
        uses: actions/cache@v4.2.0
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ matrix.os }}-${{ hashFiles('cabal.project.freeze') }}

      - name: Build binaries
        run: |
          mkdir dist
          cabal install exe:hadolint --install-method=copy --overwrite-policy=always --installdir=dist --ghc-options="-fPIC"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-${{ matrix.target }}
          path: ${{ runner.os == 'Windows' && 'dist\\hadolint.exe' || './dist/hadolint' }}
          retention-days: 3

  docker:
    needs:
      - build-static
      - build-dynamic
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - amd64
          - arm64
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: hadolint-linux-${{matrix.target}}
          path: ${{matrix.target}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image Scratch
        uses: docker/build-push-action@v6
        if: matrix.target == 'amd64'
        with:
          context: ${{matrix.target}}
          file: docker/Dockerfile
          platforms: linux/${{matrix.target}}
          target: base
          push: true
          tags: |
            hadolint/hadolint:${{github.sha}}-${{matrix.target}}
            ghcr.io/hadolint/hadolint:${{github.sha}}-${{matrix.target}}

      - name: Push Docker Image Debian
        uses: docker/build-push-action@v6
        with:
          context: ${{matrix.target}}
          file: docker/Dockerfile
          platforms: linux/${{matrix.target}}
          target: debian
          push: true
          tags: |
            hadolint/hadolint:${{github.sha}}-debian-${{matrix.target}}
            ghcr.io/hadolint/hadolint:${{github.sha}}-debian-${{matrix.target}}

      - name: Push Docker Image Alpine
        uses: docker/build-push-action@v6
        if: matrix.target == 'amd64'
        with:
          context: ${{matrix.target}}
          file: docker/Dockerfile
          platforms: linux/${{matrix.target}}
          target: alpine
          push: true
          tags: |
            hadolint/hadolint:${{github.sha}}-alpine-${{matrix.target}}
            ghcr.io/hadolint/hadolint:${{github.sha}}-alpine-${{matrix.target}}

  docker-release:
    needs: docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry:
          - hadolint/hadolint
          - ghcr.io/hadolint/hadolint
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set target and tag
        id: build-opts
        run: |
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              echo "tag=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT
            else
              echo "tag=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
            fi

      - name: Push scratch image
        run: |
          docker pull --platform linux/amd64 ${{ matrix.registry }}:${{github.sha}}-amd64
          docker pull --platform linux/arm64 ${{ matrix.registry }}:${{github.sha}}-debian-arm64

          docker buildx imagetools create \
            --tag ${{ matrix.registry }}:latest \
            ${{ matrix.registry }}:${{github.sha}}-amd64 \
            ${{ matrix.registry }}:${{github.sha}}-debian-arm64

          if [ -n "${{ steps.build-opts.outputs.tag }}" ]; then
            docker buildx imagetools create \
              --tag ${{ matrix.registry }}:v${{ steps.build-opts.outputs.tag }} \
              ${{ matrix.registry }}:${{github.sha}}-amd64 \
              ${{ matrix.registry }}:${{github.sha}}-debian-arm64
          fi

      - name: Push alpine image
        run: |
          docker pull --platform linux/amd64 ${{ matrix.registry }}:${{github.sha}}-alpine-amd64
          docker tag \
            ${{ matrix.registry }}:${{github.sha}}-alpine-amd64 \
            ${{ matrix.registry }}:latest-alpine
          docker push ${{ matrix.registry }}:latest-alpine

          if [ -n "${{ steps.build-opts.outputs.tag }}" ]; then
            docker tag \
              ${{ matrix.registry }}:${{github.sha}}-amd64 \
              ${{ matrix.registry }}:v${{ steps.build-opts.outputs.tag }}-alpine-amd64
            docker push ${{ matrix.registry }}:v${{ steps.build-opts.outputs.tag }}-alpine-amd64
          fi

      - name: Push debian image
        run: |
          docker pull --platform linux/amd64 ${{ matrix.registry }}:${{github.sha}}-debian-amd64
          docker pull --platform linux/arm64 ${{ matrix.registry }}:${{github.sha}}-debian-arm64

          docker buildx imagetools create \
            --tag ${{ matrix.registry }}:latest-debian \
            ${{ matrix.registry }}:${{github.sha}}-debian-amd64 \
            ${{ matrix.registry }}:${{github.sha}}-debian-arm64

          if [ -n "${{ steps.build-opts.outputs.tag }}" ]; then
            docker buildx imagetools create \
              --tag ${{ matrix.registry }}:v${{ steps.build-opts.outputs.tag }}-debian \
              ${{ matrix.registry }}:${{github.sha}}-debian-amd64 \
              ${{ matrix.registry }}:${{github.sha}}-debian-arm64
          fi

  release:
    if: github.event_name != 'workflow_dispatch'
    needs:
      - docker-release
      - build-static
      - build-dynamic
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:

      - name: Check out
        uses: actions/checkout@v4

      - name: Download Linux x86
        uses: actions/download-artifact@v4
        with:
          name: hadolint-linux-amd64
          path: artifacts/hadolint-linux-x86_64

      - name: Download Linux arm64
        uses: actions/download-artifact@v4
        with:
          name: hadolint-linux-arm64
          path: artifacts/hadolint-linux-arm64

      - name: Download Macos x86
        uses: actions/download-artifact@v4
        with:
          name: hadolint-macos-x86_64
          path: artifacts/hadolint-macos-x86_64

      - name: Download Macos arm
        uses: actions/download-artifact@v4
        with:
          name: hadolint-macos-arm64
          path: artifacts/hadolint-macos-arm64

      - name: Download Windows x86
        uses: actions/download-artifact@v4
        with:
          name: hadolint-windows-x86_64
          path: artifacts/hadolint-windows-x86_64

      - name: Rename and Checksum
        run: |
          mv artifacts/hadolint-linux-x86_64/hadolint hadolint-linux-x86_64
          mv artifacts/hadolint-linux-arm64/hadolint hadolint-linux-arm64
          mv artifacts/hadolint-macos-x86_64/hadolint hadolint-macos-x86_64
          mv artifacts/hadolint-macos-arm64/hadolint hadolint-macos-arm64
          mv artifacts/hadolint-windows-x86_64/hadolint hadolint-windows-x86_64.exe

          sha256sum -b hadolint-linux-x86_64 > hadolint-linux-x86_64.sha256
          sha256sum -b hadolint-linux-arm64 > hadolint-linux-arm64.sha256
          sha256sum -b hadolint--x86_64 > hadolint-macos-x86_64.sha256
          sha256sum -b hadolint-macos-arm64 > hadolint-macos-arm64.sha256
          sha256sum -b hadolint-windows-x86_64.exe > hadolint-windows-x86_64.exe.sha256

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            hadolint-linux-x86_64
            hadolint-linux-x86_64.sha256
            hadolint-linux-arm64
            hadolint-linux-arm64.sha256
            hadolint-macos-x86_64
            hadolint-macos-x86_64.sha256
            hadolint-macos-arm64
            hadolint-macos-arm64.sha256
            hadolint-windows-x86_64.exe
            hadolint-windows-x86_64.exe.sha256
